devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
data("Orthodont")
find_ccc(Orthodont, "Subject")
devtools::load_all()
find_ccc(Orthodont, "Subject")
A <- find_ccc(Orthodont, "Subject")
class(A)
devtools::check()
data(Orthodont)
# are there cluster-constant covariates?
find_ccc(Orthodont, "Subject")
mod <- mermboost(distance ~ bbs(age, knots = 4) + bols(Sex) + (1 |Subject),
data = Orthodont, family = gaussian,
control = boost_control(mstop = 100))
norm_cv <- mer_cvrisk(mod, no_of_folds = 10)
opt_m <- mstop(norm_cv)
mod_opt <- mermboost(distance ~ bbs(age, knots = 4) + bols(Sex) + (1 |Subject),
data = Orthodont, family = gaussian,
control = boost_control(mstop = opt_m))
ranef(mod_opt)
VarCorr(mod_opt)
devtools::check()
devtools::check()
devtools::document()
A <- glmboost(distance ~ age + Sex, data = Orthodont)
isS4(A)
isS4(A)
isS3(A)
str(A)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
?predict.glm
library(lme4)
?predict.merMod
?glmboost
devtools::check()
climers_sub
data(climers_sub)
data("climers_sub")
data("climbers_sub")
devtools::check()
devtools::check()
devtools::load_all()
data("Orthodont")
# are there cluster-constant covariates?
find_ccc(Orthodont, "Subject")
mod <- mermboost(distance ~ bbs(age, knots = 4) + bols(Sex) + (1 |Subject),
data = Orthodont, family = gaussian,
control = boost_control(mstop = 100))
# let mermboost do the cluster-sensitive cross-validation for you
norm_cv <- mer_cvrisk(mod, no_of_folds = 10)
opt_m <- mstop(norm_cv)
# fit model with optimal stopping iteration
mod_opt <- mermboost(distance ~ bbs(age, knots = 4) + bols(Sex) + (1 |Subject),
data = Orthodont, family = gaussian,
control = boost_control(mstop = opt_m))
# use the model as known from mboost
# in additional, there are some methods knwon from lme4
ranef(mod_opt)
VarCorr(mod_opt)
rm(list = ls())
data(Orthodont)
mod <- glmermboost(distance ~ age + Sex + (1 |Subject),
data = Orthodont, family = gaussian,
control = boost_control(mstop = 50))
norm_cv <- mer_cvrisk(mod, no_of_folds = 10)
opt_m <- mstop(norm_cv)
plot(norm_cv)
any(predict(mod, RE = F) == predict(mod, RE = T))
all(predict(mod, RE = F) ==
predict.glmboost(mod) + mod$nuisance()[[mstop(mod)]]$ff
)
ranef(mod)
VarCorr(mod, iteration = 10)
devtools::check()
